setwd("./")
library(aTSA)
library(xts)
library(anytime)
library(fGarch)
data_SP500_full <- read.csv(file="SP500_daily.csv", header=TRUE, sep=",")
data_SP500_full <- read.csv(file="./SP500_daily.csv", header=TRUE, sep=",")
data_SP500_full <- read.csv(file="SP500_daily.csv", header=TRUE, sep=",")
data_SP500_full$Close
xtsdata_SP500 <- xts(x=data_SP500_full[c("Close")], order.by=anytime(data_SP500_full$Date))
plot.xts(xtsdata_SP500, plot.type = c("single"), main ="S&P 500 index, close price" , legend.loc = "topleft", grid.col="lightgray")
# xtsdata_SP500 <- xts(x=data_SP500_full[c("Close")], order.by=anytime(data_SP500_full$Date))
xtsdata_SP500 <- xts(x=data_SP500_full$Close, order.by=anytime(data_SP500_full$Date))
plot.xts(xtsdata_SP500, plot.type = c("single"), main ="S&P 500 index, close price" , legend.loc = "topleft", grid.col="lightgray")
plot.xts(xtsdata_SP500, plot.type = c("single"), main ="S&P 500 index, close price" , legend.loc = "topleft", grid.col="lightgray")
xtsdata_SP500 <- xts(x=data_SP500_full[c("Close")], order.by=anytime(data_SP500_full$Date))
# xtsdata_SP500 <- xts(x=data_SP500_full$Close, order.by=anytime(data_SP500_full$Date))
plot.xts(xtsdata_SP500, plot.type = c("single"), main ="S&P 500 index, close price" , legend.loc = "topleft", grid.col="lightgray")
data_SP500_full[c("Closed", "Open")]
data_SP500_full[c("Close", "Open")]
# Plot of returns
xtsdata_SP500_returns <- diff(log(xtsdata_SP500))
xtsdata_SP500_returns <- na.omit(xtsdata_SP500_returns)
xtsdata_SP500_returns <- na.omit(xtsdata_SP500_returns)
View(data_SP500_full)
View(xtsdata_SP500_returns)
View(xtsdata_SP500_returns)
# Plot of returns
# log(1+r) ~ r, taylor's polynomial of degree 1.
xtsdata_SP500_returns <- diff(log(xtsdata_SP500))
xtsdata_SP500_returns <- na.omit(xtsdata_SP500_returns)
plot.xts(xtsdata_SP500_returns, plot.type = c("single"), main ="S&P 500 index, returns" , legend.loc = "topleft", grid.col="lightgray", col="blue")
help(garchFit)
summary(model)
model <- garchFit(
formula=~arma(1,1)+garch(1,1),
data = xtsdata_SP500_returns,
trace = TRUE)
model <- garchFit(
formula=~arma(1,1)+garch(1,1),
data=xtsdata_SP500_returns,
trace=FALSE)
summary(model)
forecast <- predict(model, plot=FALSE, n.ahead=10)
summary(forecast)
forecast <- predict(model, plot=TRUE, n.ahead=10)
forecast <- predict(model, plot=FALSE, n.ahead=10)
f_mean <- forecast$meanForecast
f_std <- forecast$standardDeviation
VaR <- f_mean - 2.33*f_std
VaR
# VaR for a $1,000,000 portfolio
VaR*1e06
# Calculate Expected Shortrall at alpha = 1%
ES <- f_mean - 2.64*f_std
ES
# ES for a $1,000,000 portfolio
ES*1e06
clear all
clear
drop()
drop
drop(*)
rm(list = ls())
ls()
library(aTSA)
library(xts)
library(anytime)
library(fGarch)
# Load, extract Close price, convert to xts format, and plot
# setwd("C:/Teaching/Undergrad/data ECO374")
data_AAPL_full <- read.csv(file="AAPL.csv", header=TRUE, sep=",")
xtsdata_AAPL <- xts(x=data_AAPL_full[c("Close")], order.by=anytime(data_AAPL_full$Date))
plot.xts(xtsdata_AAPL, plot.type = c("single"), main ="Apple stock price (Close)" , legend.loc = "topleft", grid.col="lightgray")
# Plot of returns
xtsdata_AAPL_returns <- diff(log(xtsdata_AAPL))
xtsdata_AAPL_returns <- na.omit(xtsdata_AAPL_returns)
plot.xts(xtsdata_AAPL_returns, plot.type = c("single"), main ="Apple stock returns" , legend.loc = "topleft", grid.col="lightgray", col="blue")
plt.xt(xtsdata_AAPL_returns)
plt.xts(xtsdata_AAPL_returns)
plot.xts(xtsdata_AAPL_returns)
plot.xts(
xtsdata_AAPL_returns,
plot.type=c("single"),
main ="Apple stock returns",
legend.loc = "topleft",
grid.col="lightgray",
col="blue"
)
data_FCX_full <- read.csv(file="FCX.csv", header=TRUE, sep=",")
# Load, extract Close price, convert to xts format, and plot
# setwd("C:/Teaching/Undergrad/data ECO374")
data_FCX_full <- read.csv(file="FCX.csv", header=TRUE, sep=",")
# Load, extract Close price, convert to xts format, and plot
# setwd("C:/Teaching/Undergrad/data ECO374")
data_FCX_full <- read.csv(file="FCX.csv", header=TRUE, sep=",")
xtsdata_FCX <- xts(x=data_FCX_full[c("Close")], order.by=anytime(data_FCX_full$Date))
plot.xts(xtsdata_FCX, plot.type = c("single"), main ="FCX stock price (Close)" , legend.loc = "topleft", grid.col="lightgray")
# Plot of returns
xtsdata_FCX_returns <- diff(log(xtsdata_FCX))
xtsdata_FCX_returns <- na.omit(xtsdata_FCX_returns)
plot.xts(xtsdata_FCX_returns, plot.type = c("single"), main ="FCX stock returns" , legend.loc = "topleft", grid.col="lightgray", col="blue")
# Apple returns model
model_AAPL <- garchFit(~arma(1,0)+garch(1,1), data = xtsdata_AAPL_returns, trace = FALSE)
forecast_AAPL <- predict(model_AAPL, plot=FALSE, n.ahead=1)
forecast_AAPL <- predict(model_AAPL, plot=FALSE, n.ahead=1)
forecast_AAPL
# FCX returns model
model_FCX <- garchFit(~arma(1,0)+garch(1,1), data = xtsdata_FCX_returns, trace = FALSE)
forecast_FCX <- predict(model_FCX, plot=FALSE, n.ahead=1)
forecast_FCX
# Optimal portfolio weights for daily return of 0.1%
m_set <- 0.1
m1 <- forecast_AAPL$meanForecast
v1 <- forecast_AAPL$standardDeviation^2
m2 <- forecast_FCX$meanForecast
v2 <- forecast_FCX$standardDeviation^2
denominator <- m1^2/v1 + m2^2/v2
w1u <- m_set*(m1^2/v1)/denominator
w2u <- m_set*(m2^2/v2)/denominator
w1 <- w1u/(w1u+w2u)
w2 <- w2u/(w1u+w2u)
w1
w2
# Approximate market returns with S&P500 index
setwd("C:/Teaching/Undergrad/data ECO374")
data_SP500_full <- read.csv(file="SP500_daily.csv", header=TRUE, sep=",")
xtsdata_SP500 <- xts(x=data_SP500_full[c("Close")], order.by=anytime(data_SP500_full$Date))
xtsdata_SP500_returns <- diff(log(xtsdata_SP500))
xtsdata_SP500_returns <- na.omit(xtsdata_SP500_returns)
model_SP <- garchFit(~arma(1,0)+garch(1,1), data = xtsdata_SP500_returns, trace = FALSE)
forecast_SP <- predict(model_SP, plot=FALSE, n.ahead=1)
s_m <- forecast_SP$standardDeviation
# Calculate beta of Apple
s_AAPL <- forecast_AAPL$standardDeviation
beta_AAPL <- 0.45*s_AAPL/s_m
beta_AAPL
# Calculate beta of FCX
s_FCX <- forecast_FCX$standardDeviation
beta_FCX <- 0.28*s_FCX/s_m
beta_FCX
# Install and load required packages
library(aTSA)
library(xts)
library(anytime)
library(fGarch)
# Dowload data on S&P500 index, daily frequency
# Source: https://finance.yahoo.com/quote/%5EGSPC/history?p=%5EGSPC
# Load, extract Close price, convert to xts format, and plot
# setwd("C:/Teaching/Undergrad/data ECO374")
data_SP500_full <- read.csv(file="SP500_daily.csv", header=TRUE, sep=",")
# Select column Frame[c(...)]
xtsdata_SP500 <- xts(x=data_SP500_full[c("Close")], order.by=anytime(data_SP500_full$Date))
plot.xts(xtsdata_SP500, plot.type = c("single"), main ="S&P 500 index, close price" , legend.loc = "topleft", grid.col="lightgray")
# Plot of returns
# log(1+r) ~ r, taylor's polynomial of degree 1.
xtsdata_SP500_returns <- diff(log(xtsdata_SP500))
xtsdata_SP500_returns <- na.omit(xtsdata_SP500_returns)
plot.xts(xtsdata_SP500_returns, plot.type = c("single"), main ="S&P 500 index, returns" , legend.loc = "topleft", grid.col="lightgray", col="blue")
# Model
model <- garchFit(
formula=~arma(1,1)+garch(1,1),
data=xtsdata_SP500_returns,
trace=FALSE)
summary(model)
forecast <- predict(model, plot=FALSE, n.ahead=10)
summary(forecast)
# Calculate VaR at alpha = 1%
f_mean <- forecast$meanForecast
f_std <- forecast$standardDeviation
VaR <- f_mean - 2.33*f_std
VaR
# VaR for a $1,000,000 portfolio
VaR*1e06
# Calculate Expected Shortrall at alpha = 1%
ES <- f_mean - 2.64*f_std
ES
# ES for a $1,000,000 portfolio
ES*1e06
qnorm(-1.96)
pnorm(-1.96)
pnorm(-1.96) / 0.05
pnorm(-1.96) / 0.1
pnorm(0.5)
pnorm(0)
pnorm(1000)
qnorm(0)
if (!require("knitr")) install.packages("knitr")
library(knitr)
opts_knit$set(root.dir = "C:/Teaching/Undergrad/data ECO374")
library(xts)
y[1] <- eps[1]
phi1 <- 0.9
phi2 <- 0.3
n <- 1000
eps <- rnorm(n, mean=0, sd=0.25)
y <- seq(0,0,length.out=n)
y[1] <- eps[1]
for (t in 2:n) {
if (y[t-1]>0)  {
y[t] <- phi1*y[t-1] + eps[t]
}
else {
y[t] <- phi2*y[t-1] + eps[t]
}
}
plot(y, type="l")
abline(h=0)
hist(y, prob = TRUE, breaks=100, xlim=c(-2,2), col="lightgrey", main="Histogram of SETAR draws", cex.main=0.85)
maxlag <- 30
ACF <- acf(y, lag.max=maxlag, plot=FALSE)
PACF <- pacf(y, lag.max=maxlag, plot=FALSE)
par(mfcol=c(1,2), mai=c(0.4, 0.4, 0.7, 0.1), cex.main=0.9)
plot(ACF[1:maxlag], main="ACF of SETAR draws")
plot(PACF[1:maxlag], ylim=c(-0.1,1), main="PACF of SETAR draws")
library(knitr)
opts_knit$set(root.dir = "C:/Teaching/Undergrad/data ECO374")
```{r}
setwd("C:/Teaching/Undergrad/data ECO374")
#setwd("C:/Teaching/Undergrad/data ECO374")
data_TB_full <- read.csv(file="TB3MS.csv", header=TRUE, sep=",")
xtsdata_TB <- xts(x=data_TB_full[c("TB3MS")], order.by=anytime(data_TB_full$DATE))
plot.xts(xtsdata_TB, plot.type = c("single"), main ="3-month Treasury Bill interest rate" , legend.loc = "topleft", grid.col="lightgray")
xtsdata_TB <- xts(x=data_TB_full[c("TB3MS")], order.by=anytime(data_TB_full$DATE))
#setwd("C:/Teaching/Undergrad/data ECO374")
data_TB_full <- read.csv(file="TB3MS.csv", header=TRUE, sep=",")
xtsdata_TB <- xts(x=data_TB_full[c("TB3MS")], order.by=anytime(data_TB_full$DATE))
if (!require("tsDyn")) install.packages("tsDyn")
library(tsDyn)
library(xts)
library(anytime)
if (!require("tsDyn")) install.packages("tsDyn")
library(tsDyn)
library(xts)
library(anytime)
#setwd("C:/Teaching/Undergrad/data ECO374")
data_TB_full <- read.csv(file="TB3MS.csv", header=TRUE, sep=",")
xtsdata_TB <- xts(x=data_TB_full[c("TB3MS")], order.by=anytime(data_TB_full$DATE))
plot.xts(xtsdata_TB, plot.type = c("single"), main ="3-month Treasury Bill interest rate" , legend.loc = "topleft", grid.col="lightgray")
threshold = 7
n <- length(xtsdata_TB$TB3MS)
D <- seq(0,0,length.out=n)
D[which(xtsdata_TB$TB3MS > threshold)] <- 1
plot(D, type="l")
Y <- xtsdata_TB$TB3MS
lagY <- lag(xtsdata_TB$TB3MS, k=1)
lagYD <- lagY*D
reg <- lm(Y ~ lagY + D + lagYD)
summary(reg)
SETAR <- setar(xtsdata_TB$TB3MS, mL=1, mH=1, th=threshold)
summary(SETAR)
predict(SETAR, n.ahead=12)
predict(SETAR, n.ahead=12, plot=TRUE)
hep(predict)
help(predict)
predict(SETAR, plot=TRUE, n.ahead=12)
library(knitr)
opts_knit$set(root.dir = "C:/Teaching/Undergrad/data ECO374")
if (!require("statip")) install.packages("statip")
library(statip)
n <- 500
y <- seq(0,0,length.out=n)
s1 <- seq(0,0,length.out=n+1)
s2 <- seq(0,0,length.out=n+1)
e <- rnorm(n, mean = 0, sd = 1)
s1[1] <- 0 # initialize
s2[1] <- 1
for (i in 1:500) {
if (s1[i]==1)  {
y[i] <- 1 + e[i]            # model in state 1
s1[i+1] <- rbern(1, 0.7)
if (s1[i+1]==0) {
s2[i+1] <- 1
} else {
s2[i+1] <- 0
}
} else {
y[i] <- -1 + e[i]
s2[i+1] <- rbern(1, 0.9)
if (s2[i+1]==0) {
s1[i+1] <- 1
} else {
s1[i+1] <- 0
}
}
}
plot(y, type="l")
s1
hist(y, prob = TRUE, breaks=50, xlim=c(-3,3), col="lightgrey", main="Histogram of MC draws", cex.main=0.9)
library(stats)
library(forecast)
library(aTSA)
# load data (Total Hours Worked in Spain and U.S.)
data <- read.csv(file="hours_worked.csv", header=TRUE, sep=",")
#------------------------------------------------------------
# Data for Spain (non-stationary AR(p))
tsdata <- ts(data$Spain,start=c(1970,1),frequency=1)
plot.ts(tsdata, ylab ="Total Hours Worked in Spain")
# test for unit root
adf.test(data$Spain)
# difference the data
D.data.Spain <- diff(data$Spain, lag = 1, differences = 1)
plot(D.data.Spain, type="l")
# test for unit root
adf.test(D.data.Spain)
# ACF, PACF
ACF <- acf(D.data.Spain, lag.max = 10 , plot = FALSE, demean = TRUE)
plot(ACF[1:10], main="ACF")
PACF <- pacf(D.data.Spain, lag.max = 10, plot = FALSE, demean = TRUE, main="ACF")
plot(PACF[1:10], main="PACF")
# model estimation and forecast (original data)
mSpain <- arima(data$Spain, order = c(2,1,2), include.mean=TRUE)
fcast <- forecast(mSpain,h=5)
fcast <- forecast(mSpain, head.h=5)
fcast <- forecast(mSpain)
plot(fcast)
fcast <- forecast(mSpain, n.ahead=5)
plot(fcast)
mSpain
fcast <- forecast(mSpain, n.ahead=5)
plot(fcast)
help(forecast)
fcast <- forecast(mSpain, lead=5)
help("forecast")
help("forecast")
fcast <- forecast.ets(mSpain, h=5)
fcast <- forecast.ets(mSpain,h=5)
mSpain <- arima(data$Spain, order = c(2,1,2), include.mean=TRUE)
fcast <- forecast.ets(mSpain,h=5)
helpplot(fcast)
fcast <- forecast::forecast.ets(mSpain,h=5)
fcast <- forecast::forecast(mSpain,h=5)
helpplot(fcast)
plot(fcast)
library(forecast)
library(xts)
library(anytime)
library(vars)
library(aTSA)
library(xts)
library(anytime)
library(urca)
library(tsDyn)
help("ca.jo")
