ggtitle("Number of sunspots") +
xlab("Year") +
ylab("Sunspot") +
theme(plot.title = element_text(size=8, face="bold"))
components.ts = decompose(ts_data)
plot(components.ts)
df <- read.csv("./data/CPIAUCSL.csv", header=TRUE, sep=",")
ts_data <- ts(df$CPIAUCSL,start=c(1947,1),frequency=12)
autoplot(ts_data) +
ggtitle("Consumer Price Index for All Urban Consumers: All Items (CPIAUCSL)") +
xlab("Date") +
ylab("CPI") +
theme(plot.title = element_text(size=8, face="bold"))
components.ts <- decompose(ts_data)
plot(components.ts)
autoplot(ts_data) +
ggtitle("Consumer Price Index for All Urban Consumers: All Items (CPIAUCSL)") +
xlab("Date") +
ylab("CPI") +
theme(plot.title = element_text(size=8, face="bold"))
components.ts <- decompose(ts_data)
plot(components.ts)
autoplot(components.ts)
plot(components.ts)
library("fUnitRoots")
# The seasonal plot
ggseasonplot(ts_data,polar=TRUE)+
ggtitle("Figure 14. Road causalities in Great Britain (Season plot)")+
theme(plot.title = element_text(size=8, face="bold"))
ggsubseriesplot(ts_data)+
ggtitle("Figure 13. Road causalities in Great Britain (Subseries plot)")+
ylab("number of deaths")+
theme(plot.title = element_text(size=8, face="bold"))
transformed <- diff(ts, lag=1, differences=1)
# The seasonal plot
ggseasonplot(transformed,polar=TRUE)+
ggtitle("Figure 14. Road causalities in Great Britain (Season plot)")+
theme(plot.title = element_text(size=8, face="bold"))
components.ts <- decompose(ts_data)
plot(components.ts)
transformed <- diff(ts, lag=1, differences=1, order=1)
?diff
?diff
autoplot(ts_data) +
ggtitle("Number of sunspots") +
xlab("Year") +
ylab("Sunspot") +
theme(plot.title = element_text(size=8, face="bold"))
setwd("/Users/tianyudu/Documents/Academics/EconForecasting/AnnEconForecast")
df <- read.csv("./data/sunspots.csv", header=TRUE, sep=",", col.names=c("Year", "Sunspots"))
ts_data <- ts(df$Sunspots,start=c(1700),frequency=1)
autoplot(ts_data) +
ggtitle("Number of sunspots") +
xlab("Year") +
ylab("Sunspot") +
theme(plot.title = element_text(size=8, face="bold"))
?ndiffs
# Determine the d number.
ndiffs(ts_data)
transformed <- diff(ts, lag=1, differences=1)
ACF <- Acf(transformed, plot=TRUE)
PACF <-Pacf(transformed, plot=TRUE)
ACF <- Acf(transformed, plot=TRUE) # q=
transformed <- diff(ts, lag=1, differences=1)
ACF <- Acf(transformed, plot=TRUE) # q=1
PACF <-Pacf(transformed, plot=TRUE) # p=8
autoplot(transformed) +
ggtitle("Differenced Series") +
xlab("Date") +
ylab("Transformed")
adf.test(transformed)
# Test stationarity
adf.test(transformed)
# ==== Fit and Evaluate the Model ====
model <- arima(ts, order = c(8,1,1))
res <- residuals(model)
mse <- mean(res**2)
rmse <- sqrt(mse)
err_abspec <- abs(res)/df$Sunspots
mae <- mean(
err_abspec[err_abspec != Inf]
)
cat("MSE:", mse, "RMSE:", rmse, "MAE:", mae)
fore <- predict(model, n.ahead=10)
ACF <- Acf(transformed, plot=TRUE, lag.max=34) # q=1
PACF <-Pacf(transformed, plot=TRUE, lag.max=34) # p=8
ACF <- Acf(transformed, plot=TRUE, lag.max=34) # q=1
PACF <-Pacf(transformed, plot=TRUE, lag.max=34) # p=8
ACF <- Acf(transformed, plot=TRUE, lag.max=34) # q=1
# ==== Fit and Evaluate the Model ====
model <- arima(ts, order=c(8,1,1))
library(lmtest)
coeftest(fitARIMA)
library(lmtest)
coeftest(model)
library(lmtest)
coeftest(fitARIMA)
coeftest(model)
hist(res)
qqplot(re)
qqplot(res)
qqline(res)
qqnorm(res)
qqline(res)
?auto.arima
auto.arima(ts_data)
auto.arima(ts_data, max.p=10, max.q=10, max.d=3)
auto.arima(ts_data, max.p=10, max.P=10, max.q=10, max.Q=10, max.d=3, max.D=3)
# ==== Fit and Evaluate the Model ====
model <- arima(ts, order=c(8,1,1))
# ==== Fit and Evaluate the Model ====
model <- arima(ts, order=c(3,1,2))
res <- residuals(model)
mse <- mean(res**2)
rmse <- sqrt(mse)
err_abspec <- abs(res)/df$Sunspots
mae <- mean(
err_abspec[err_abspec != Inf]
)
cat("MSE:", mse, "RMSE:", rmse, "MAE:", mae)
auto.arima(ts_data, max.p=10, max.P=10, max.q=10, max.Q=10, max.d=3, max.D=3, trace=TRUE)
predict(model, n.ahead=10)
?predict
?c
fore <- forecast(model, h=10, level=c(99.5))
fore <- forecast.arima(model, h=10, level=c(99.5))
fore <- forecast.Arima(model, h=10, level=c(99.5))
library(forecast)
fore <- forecast.Arima(model, h=10, level=c(99.5))
?forecast.Arima
fore <- forecast.Arima(model, h=10, level=c(99.5))
fore <- forecast::forecast.Arima(model, h=10, level=c(99.5))
fore <- forecast::forecast(model, h=10, level=c(99.5))
library("forecast")
fore <- forecast::forecast(model, h=10, level=c(99.5))
library("fUnitRoots")
library(lmtest)
library("forecast")
library(FitAR)
setwd("/Users/tianyudu/Documents/Academics/EconForecasting/AnnEconForecast")
df <- read.csv("./data/sunspots.csv", header=TRUE, sep=",", col.names=c("Year", "Sunspots"))
ts_data <- ts(df$Sunspots,start=c(1700),frequency=1)
autoplot(ts_data) +
ggtitle("Number of sunspots") +
xlab("Year") +
ylab("Sunspot") +
theme(plot.title = element_text(size=8, face="bold"))
# Determine the d number.
ndiffs(ts_data)
transformed <- diff(ts, lag=1, differences=1)
transformed <- diff(ts_data, lag=1, differences=1)
ACF <- Acf(transformed, plot=TRUE, lag.max=34) # q=1
PACF <-Pacf(transformed, plot=TRUE, lag.max=34) # p=8
autoplot(transformed) +
ggtitle("Differenced Series") +
xlab("Date") +
ylab("Transformed")
# Test stationarity
adf.test(transformed)
# Find the model minimizing
auto.arima(ts_data, max.p=10, max.P=10, max.q=10, max.Q=10, max.d=3, max.D=3, trace=TRUE)
# ==== Fit and Evaluate the Model ====
model <- arima(ts, order=c(3,1,2))
res <- residuals(model)
# ==== Fit and Evaluate the Model ====
model <- arima(ts_data, order=c(3,1,2))
res <- residuals(model)
mse <- mean(res**2)
rmse <- sqrt(mse)
err_abspec <- abs(res)/df$Sunspots
mae <- mean(
err_abspec[err_abspec != Inf]
)
cat("MSE:", mse, "RMSE:", rmse, "MAE:", mae)
library(lmtest)
coeftest(model)
fore <- forecast::forecast(model, h=10, level=c(99.5))
plot.forecast(fore)
fore <- forecast::forecast.Arima(model, h=10, level=c(99.5))
fore <- forecast.Arima(model, h=10, level=c(99.5))
plot(fore)
fore <- forecast.Arima(model, h=10, level=c(99))
fore <- forecast(model, h=10, level=c(99))
fore <- forecast::forecast(model, h=10, level=c(99))
plot.forecast(fore)
fore <- forecast::forecast(model, h=50, level=c(99))
plot.forecast(fore)
plot(fore)
fore <- forecast::forecast(model, h=500, level=c(99))
plot(fore)
fore <- forecast::forecast(model, h=25, level=c(99))
plot(fore)
# May 17 2019
# Benchmark ARIMA for sunspot data.
library(fpp2)
library(ggfortify)
library(forecast)
library(stats)
library(aTSA)
setwd("/Users/tianyudu/Documents/Academics/EconForecasting/AnnEconForecast")
df <- read.csv("./data/sunspots.csv", header=TRUE, sep=",", col.names=c("Year", "Sunspots"))
ts_data <- ts(df$Sunspots,start=c(1700),frequency=1)
autoplot(ts_data) +
ggtitle("Number of sunspots") +
xlab("Year") +
ylab("Sunspot") +
theme(plot.title = element_text(size=8, face="bold"))
# Determine the d number.
ndiffs(ts_data)
transformed <- diff(ts_data, lag=1, differences=1)
ACF <- Acf(transformed, plot=TRUE, lag.max=34) # q=1
PACF <-Pacf(transformed, plot=TRUE, lag.max=34) # p=8
autoplot(transformed) +
ggtitle("Differenced Series") +
xlab("Date") +
ylab("Transformed")
# Test stationarity
adf.test(transformed)
# Find the model minimizing
auto.arima(ts_data, max.p=10, max.P=10, max.q=10, max.Q=10, max.d=3, max.D=3, trace=TRUE)
# ==== Fit and Evaluate the Model ====
model <- arima(ts_data, order=c(3,1,2))
res <- residuals(model)
mse <- mean(res**2)
rmse <- sqrt(mse)
err_abspec <- abs(res)/df$Sunspots
mae <- mean(
err_abspec[err_abspec != Inf]
)
cat("MSE:", mse, "RMSE:", rmse, "MAE:", mae)
library(lmtest)
coeftest(model)
fore <- forecast::forecast(model, h=25, level=c(99))
plot(fore)
?lmtes
# May 17 2019
# Benchmark ARIMA for sunspot data.
library(fpp2)
library(ggfortify)
library(forecast)
library(stats)
library(aTSA)
setwd("/Users/tianyudu/Documents/Academics/EconForecasting/AnnEconForecast")
df <- read.csv("./data/sunspots.csv", header=TRUE, sep=",", col.names=c("Year", "Sunspots"))
ts_data <- ts(df$Sunspots,start=c(1700),frequency=1)
autoplot(ts_data) +
ggtitle("Number of sunspots") +
xlab("Year") +
ylab("Sunspot") +
theme(plot.title = element_text(size=8, face="bold"))
# Determine the d number.
ndiffs(ts_data)
transformed <- diff(ts_data, lag=1, differences=1)
ACF <- Acf(transformed, plot=TRUE, lag.max=34) # q=1
PACF <-Pacf(transformed, plot=TRUE, lag.max=34) # p=8
autoplot(transformed) +
ggtitle("Differenced Series") +
xlab("Date") +
ylab("Transformed")
# Test stationarity
adf.test(transformed)
# Find the model minimizing
auto.arima(ts_data, max.p=10, max.P=10, max.q=10, max.Q=10, max.d=3, max.D=3, trace=TRUE)
# ==== Fit and Evaluate the Model ====
model <- arima(ts_data, order=c(3,1,2))
res <- residuals(model)
mse <- mean(res**2)
rmse <- sqrt(mse)
err_abspec <- abs(res)/df$Sunspots
mae <- mean(
err_abspec[err_abspec != Inf]
)
cat("MSE:", mse, "RMSE:", rmse, "MAE:", mae)
library(lmtest)
coeftest(model)
fore <- forecast::forecast(model, h=25, level=c(99))
plot(fore)
# Train and test spliting
train
int(9.0)
?as
# Train and test spliting
train_size <- as.integer(0.8 * length(ts_all))
ts_all <- ts(df$Sunspots,start=c(1700),frequency=1)
# Train and test spliting
train_size <- as.integer(0.8 * length(ts_all))
ts_data <- ts_all[1:train_size]
ts_test <- ts_all[train_size+1:]
ts_test <- ts_all[train_size+1:length(ts_all)]
train_size
train_size+1
ts_test <- ts_all[train_size+1: length(ts_all)]
length(ts_all)
ts_test <- ts_all[c(train_size+1: length(ts_all))]
ts_test <- ts_all[train_size+1: length(ts_all)]
test_size <- length(ts_all) - train_size
ts_test <- tail(ts_all, test_size)
ts_data <- head(ts_all, train_size)
autoplot(ts_data) +
ggtitle("Number of sunspots") +
xlab("Year") +
ylab("Sunspot") +
theme(plot.title = element_text(size=8, face="bold"))
install.packages(c("assertthat", "backports", "BH", "boot", "caTools", "cli", "clipr", "cluster", "colorspace", "curl", "data.table", "dplyr", "e1071", "evaluate", "forcats", "forecast", "ggfortify", "ggplot2", "glue", "gtable", "haven", "highr", "knitr", "lazyeval", "lme4", "lmtest", "maptools", "MASS", "Matrix", "mgcv", "nlme", "openssl", "PerformanceAnalytics", "pillar", "progress", "psych", "purrr", "quadprog", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RCurl", "readxl", "rlang", "rmarkdown", "rpart", "rpart.plot", "rsconnect", "rstudioapi", "sandwich", "stringi", "stringr", "survival", "tibble", "tidyr", "tinytex", "uroot", "xfun", "XML", "zip", "zoo"))
library(fpp2)
library(ggfortify)
library(forecast)
library(stats)
library(aTSA)
library(lmtest)
setwd("/Users/tianyudu/Documents/Academics/EconForecasting/AnnEconForecast")
df <- read.csv("./data/sunspots.csv", header=TRUE, sep=",", col.names=c("Year", "Sunspots"))
ts_all <- ts(df$Sunspots,start=c(1700),frequency=1)
# Train and test spliting
train_size <- as.integer(0.8 * length(ts_all))
test_size <- length(ts_all) - train_size
ts_train <- head(ts_all, train_size)
ts_test <- tail(ts_all, test_size)
autoplot() +
ggtitle("Number of sunspots") +
xlab("Year") +
ylab("Sunspot") +
theme(plot.title = element_text(size=8, face="bold"))
# Determine the d number.
ndiffs(ts_train)
autoplot() +
ggtitle("Number of sunspots") +
xlab("Year") +
ylab("Sunspot") +
theme(plot.title = element_text(size=8, face="bold"))
autoplot(ts_train) +
ggtitle("Number of sunspots") +
xlab("Year") +
ylab("Sunspot") +
theme(plot.title = element_text(size=8, face="bold"))
# Determine the d number.
ndiffs(ts_train)
# Inspect the transformed sequence
transformed <- diff(ts_train, lag=1, differences=1)
ACF <- Acf(transformed, plot=TRUE, lag.max=34) # q=1
PACF <-Pacf(transformed, plot=TRUE, lag.max=34) # p=8
autoplot(transformed) +
ggtitle("Differenced Series") +
xlab("Date") +
ylab("Transformed")
# Test stationarity
adf.test(transformed)
# Find the model minimizing AIC w/ correction.
auto.arima(ts_train, max.p=10, max.P=10, max.q=10, max.Q=10, max.d=3, max.D=3, trace=TRUE)
plot(ts_train)
# ==== Fit and Evaluate the Model ====
model <- arima(ts_train, order=c(2,0,1))
res <- residuals(model)
mse <- mean(res**2)
rmse <- sqrt(mse)
err_abspec <- abs(res)/df$Sunspots
err_abspec <- abs(res)/ts_train
mae <- mean(
err_abspec[err_abspec != Inf]
)
cat("MSE:", mse, "RMSE:", rmse, "MAE:", mae)
coeftest(model)
fore <- forecast::forecast(model, h=test_size, level=c(99))
plot(fore)
fore <- forecast::forecast(model, h=1, level=c(99))
plot(fore)
ts_train + ts_data[1]
length(ts_train + ts_data[1])
for (i in c(1:10)) {print(i)
}
# Simple forecast
fore <- forecast::forecast(model, h=10, level=c(99))
plot(fore)
# Rolling forecast
rf <- c()
rf
fore$mean
# Simple forecast
fore <- forecast::forecast(model, h=1, level=c(99))
fore$fitted
fore$method
fore$mean
plot(fore)
autoplot(fore)
rf <- c()
for (i in c(1: test_size)){
# Refit model
model <- arima(
head(ts_all, train_size+i-1),
order=c(2,0,1)
)
# Produce one step forecast
f <- forecast::forecast(model, h=1, level=c(99))
rf <- c(rf, f$mean)
}
rf
ggplot(rf)
autoplot(rf)
plot(rf)
rf
ts_all
time(ts_all)
ts_rf <- ts(tf, start=time(ts_test)[1])
ts_rf <- ts(rf, start=time(ts_test)[1])
plot(ts_rf, ts_test)
cbind(rf, ts_test)
cbind
?cbind
combined <- cbind(rf, ts_test)
autoplot(combined)
autoplot(combined) +
ggtitle("One Step Rolling Forecasting on Test Set") +
xlab("Date") +
ylab(c("Rolling Forecast", "Actual"))
autoplot(combined) +
ggtitle("One Step Rolling Forecasting on Test Set") +
xlab("Date") +
ylab("Rolling Forecast", "Actual")
?combined
?cbind
head(combined)
combined <- cbind(rf, ts_test, colnames=c("Rolling Forecast", "Actual"))
autoplot(combined) +
ggtitle("One Step Rolling Forecasting on Test Set") +
xlab("Date")
combined <- cbind(rf, ts_test)
combined <- cbind("Rolling Forecast"=rf, ts_test)
autoplot(combined) +
ggtitle("One Step Rolling Forecasting on Test Set") +
xlab("Date")
combined <- cbind("Rolling Forecast"=rf, "Actual"=ts_test)
autoplot(combined) +
ggtitle("One Step Rolling Forecasting on Test Set") +
xlab("Date")
autoplot(combined) +
ggtitle("One Step Rolling Forecasting on Test Set") +
xlab("Date") +
ylab("Values")
autoplot(combined) +
ggtitle("One Step Rolling Forecasting on Test Set") +
xlab("Date") +
ylab("Sunspot")
# Performance Metrics
mse_test <- mean((ts_rf - ts_train) ** 2)
ts_tf - ts_train
ts_rf - ts_train
ts_rf
ts_rf - ts_train
ts_train
ts_rf$values
ts_rf
as.matrix(ts_rf)
as.matrix(ts_rf) - as.matrix(ts_train)
as.array(ts_rf) - as.array(ts_train)
combined <- cbind("Rolling Forecast"=ts_rf, "Actual"=ts_test)
autoplot(combined) +
ggtitle("One Step Rolling Forecasting on Test Set") +
xlab("Date") +
ylab("Sunspot")
# Performance Metrics
mse_test <- mean((ts_rf - ts_train) ** 2)
rf
rf - ts_train
# Performance Metrics
mse_test <- mean((ts_rf - ts_test) ** 2)
rmse_test <- sqrt(mse_test)
cat("Test MSE:", mse, "RMSE:", rmse)
rmse_test <- sqrt(mse_test)
# Performance Metrics
mse_test <- mean((ts_rf - ts_test) ** 2)
rmse_test <- sqrt(mse_test)
cat("Test MSE:", mse, "RMSE:", rmse)
rf <- c()
for (i in c(1: test_size)){
# Refit model
model <- arima(
head(ts_all, train_size+i),
order=c(2,0,1)
)
# Produce one step forecast
f <- forecast::forecast(model, h=1, level=c(99))
rf <- c(rf, f$mean)
}
ts_rf <- ts(rf, start=time(ts_test)[1])
combined <- cbind("Rolling Forecast"=ts_rf, "Actual"=ts_test)
autoplot(combined) +
ggtitle("One Step Rolling Forecasting on Test Set") +
xlab("Date") +
ylab("Sunspot")
# Performance Metrics
mse_test <- mean((ts_rf - ts_test) ** 2)
rmse_test <- sqrt(mse_test)
cat("Test MSE:", mse, "RMSE:", rmse)
rf <- c()
for (i in c(1: test_size)){
# Refit model
model <- arima(
head(ts_all, train_size+i-3),
order=c(2,0,1)
)
# Produce one step forecast
f <- forecast::forecast(model, h=1, level=c(99))
rf <- c(rf, f$mean)
}
ts_rf <- ts(rf, start=time(ts_test)[1])
combined <- cbind("Rolling Forecast"=ts_rf, "Actual"=ts_test)
autoplot(combined) +
ggtitle("One Step Rolling Forecasting on Test Set") +
xlab("Date") +
ylab("Sunspot")
k <- c(1,2,3)
head(k, 2)
